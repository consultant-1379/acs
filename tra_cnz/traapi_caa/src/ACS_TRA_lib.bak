//**********************************************************************
// 
// .NAME
//	ACS_TRA_internals.H	- Internal include file defining the data 
//				  structures used in the trace API and in 
//				  the trace tools. 
//
//
// .LIBRARY 3C++
// .PAGENAME ACS_AEH_internals
// .HEADER  TMOS/ACS 
// .LEFT_FOOTER Ericsson Telecom AB
// .INCLUDE ACS_AEH_internals.H

// .COPYRIGHT
//  COPYRIGHT Ericsson Utvecklings AB, Sweden 1995-1999.
//  All rights reserved.
//
//  The Copyright to the computer program(s) herein is the property of
//  Ericsson Telecom AB, Sweden.
//  The program(s) may be used and/or copied only with the written
//  permission from Ericsson Telecom AB or in accordance with
//  the terms and conditions stipulated in the agreement/contract under
//  which the program(s) have been supplied.

// .DESCRIPTION 
//	This is the pseudo data structure used in the  shared memory trace
//	kernel.
//	All pointers are relative the start address of the shared memory.
//	Two types of memory allocation:
//      permanent trace data
//		trace_element, proc, record, format
// 	are allocated from the start of the shared memory, and accessed
//	through a hash table.
//
//	temporary task data
//		trace_task, trace_set, filters, log buffers , ...
//	are allocated from free lists or from the end of the shared memory
//      two types :
//	log buffers 	size BUFFERSIZE
//	other trace tasks, trace_set  size TEMPSIZE

// .ERROR HANDLING
//

// DOCUMENT NO
//	190 89-CAA 109 0024

// AUTHOR 
// 	1995-07-05 by TEI/TS  TEILURD

// .REVISION
//	
//	  	

// CHANGES
//
//	RELEASE REVISION HISTORY
//
//	REV NO	DATE 		NAME	DESCRIPTION
//			19950705	TEILURD	1:st revision
//          19960119	ETXLMGR TRACE_KEY replaced by get_trace_key()
//		PB1	19981009	UABNYB	NT port started	
//	

// .SEE ALSO 
// 	

//**********************************************************************

#ifndef ACS_AEH_INTERNALS_H 
#define ACS_AEH_INTERNALS_H

#ifdef _WIN32 
	// typedefs
	typedef	int	key_t;		

	#include <sys/types.h>
	#include <stdio.h>
	#include <errno.h>
	#include <memory.h>
	#include <windows.h>
	#include <string.h>
	#include <stdlib.h>
	#include <ctype.h>
	#include <time.h>
	#include <sys/timeb.h>
	#include <process.h>

#else

	#include <sys/types.h>
	#include <sys/ipc.h>
	#include <sys/shm.h>
	#include <sys/sem.h>
	#include <stdio.h>
	#include <errno.h>
	#include <memory.h>
	#include <sys/time.h>
	#include <string.h>
	#include <unistd.h>
	#include <stdlib.h>
	#include <ctype.h>
#endif
	
#ifdef _WIN32
#	ifdef ACS_TRABUILD
#		define TRALIBSPEC __declspec (dllexport)
#	else
#		define TRALIBSPEC __declspec (dllimport)
#	endif 
#	else
#	define TRALIBSPEC
#endif

// revision and level to be set in the trace container 
#define TRACE_REV  "A   "
#define TRACE_LEVEL 1
#define TRA_mutex "ACS_TRA_trainit_shmem.mutex"
#define TRA_shared_mem "ACS_TRA_trainit_shared.mem"
#define TRA_Registry_Common  "SOFTWARE\\Ericsson\\Adjunct Processor\\ACS\\common"
#define TRA_Registry_Home "SOFTWARE\\Ericsson\\Adjunct Processor\\ACS\\CXC13789"
#define TRA_On_Off_RegKey_Name "TRACE_ON/OFF"
#define TRA_sharded_mem_RegKey_Name "TRACE_MEMORYSIZE"
#define TRA_On_RegValue "ON"
#define TRA_Off_RegValue "OFF"
#define TRA_Error_Log_Value	"acsnslogs"
#define TRA_Error_dir "\\TRA"
#define TRA_Error_file "\\ACS_TRA_Error_message.msg"
// GLOBAL variables

#ifdef _WIN32
	HANDLE hshared_mem;
	HANDLE htrace_mutex;
// user name max length, see also parameter TEMPSIZE below which 
// is userNameLength + 32
#define userNameMaxLength 32

#endif

//******************************************************************************
// Type declaration for relpointer type: offset relative to the start of shared
// memory trace segmant
//******************************************************************************

typedef int     relpointer;

// ----------------------------------------------------------------------- 

//******************************************************************************
// The struct trace_data is used for permanent data accessed via the hash
// table process name record name format trace element
//******************************************************************************

// PB1 first element PROC in UNIX seems to be used somewhere in NT
// therefore changed to PRCS
enum trace_data_type {
	PRCS, REC, FORMAT, TRCE, CLASS, PLUS, MINUS, INTERSECTION
};

struct trace_data {
	relpointer      next;
	enum trace_data_type typ;
	/*char            data[]; not allowed by HP compiler */
};

typedef struct trace_data *trace_datap;

// trace element 
struct trace_element {
	relpointer      proc;
	relpointer      record;
	relpointer      format;
	relpointer      next;
	int             mask;
};
typedef struct trace_element *trace_elementp;

// ----------------------------------------------------------------------- 

#ifdef _WIN32
// username stored with 32 chars instead of an integer 
#define TEMPSIZE 64
#else
#define TEMPSIZE 32
#endif

// for linking in free lists 
struct list {
	relpointer      next;
};



enum filters {
	LOG, PID, IF,COUNTER, ABORT, TRIGGER, EXEC, DUMP
};

// trace task 
struct trace_task {
	int             refcount;
	int             status;

#ifdef _WIN32
	char			user[userNameMaxLength];
#else
	int				user;
#endif

	char            name[4];/* task name <= 4 characters */
	relpointer      set;
	relpointer      filter;
};

typedef struct trace_task *trace_taskp;

/* trace set */
struct trace_set 
{
	/* same header format as trace data */
	relpointer      next;
	enum trace_data_type typ;	/* operator or basic type */
	/* extra data for set tree */
	relpointer      left;	/* basic set  relpointer */
	relpointer      right;	/* basic set relpointer */
	int             refcount;
};

typedef struct trace_set *trace_setp;
struct filter 
{
	enum filters    typ;
};
typedef struct filter *filterp;
/* log filter */
struct log 
{
	enum filters    typ;
	int             refcount;
	int             nobuf;
	relpointer      startbuf;
	relpointer      startpos;
	relpointer      currbuf;
	relpointer      currpos;

};

typedef struct log *logp;
/* pid filter */
struct pidfilter 
{
	enum filters    typ;
	int             refcount;
	int             pid;
	relpointer      filter;
};
/* pid table record */
struct pidrec 
{
	relpointer      next;
	relpointer      proc;
	int             pid;
};

/* threshold filter */
struct threshold 
{
	enum filters    typ;
	int             refcount;
	int             limit;
	int             reccount;
	relpointer      lessfilter;
	relpointer      equalfilter;
	relpointer      greaterfilter;
};
/*-------------------------------------------------------------------------*/
/* log buffer  */
#define BUFFERSIZE 1024
struct logbuff 
{
	relpointer      next;
	char            data[BUFFERSIZE- sizeof(relpointer)];
};
/*
 * log record format pointer to next record timestamp	pid pointer to trace
 * element aligned parameters
 */



/*------------------------------------------------------------------------*/
/* header -  offsets variables */
#define HASHSIZE 256
#define MAX_TASK_COUNT 32

struct trace_mem {
	char		rev[4];
	char		lev;
	int 		state;
	relpointer      trce_head;
	relpointer      free_trace_data;
	relpointer      free_task_data;
	relpointer      pid_head;
	relpointer      free_temp_head;
	relpointer      free_buff_head;
	relpointer		free_pid_head;
	relpointer      hashtab[HASHSIZE];
	int             taskcount;
	int             tasks[ MAX_TASK_COUNT];
	int		size;
	int		spare[9];
};


/*------------------------------------------------------------------------*/

#define DEFAULT_SIZE 1000	/* kilobytes*/

extern TRALIBSPEC struct trace_mem *shmp;
extern int             smid;

extern int             pid;

#ifdef _WIN32
// used to overcome difference between UNIX and NT semaphore handling
extern HANDLE traAliveEvent;
#endif
/*------------------------------------------------------------------------*/


/* MACROS */

#define ABS(typ, p)\
         ( typ)(p+ ( int)shmp)
#define REL(p)\
	(int)p - (int)shmp

#define ALIGN(p, n)\
	p+=( (p%n)==0)?0 : (n-(p%n));


#define ADVANCE(size)\
	bp+= size;

#define CHECK_BUFFER(size)\
	if (bp+size >endbuf){ \
	startbufp= ABS(relpointer *, *startbufp);\
	endbuf = (int)startbufp + BUFFERSIZE;\
	bp= (int)startbufp +sizeof(relpointer);\
	}
#define CHECK_STARTPOS(size)\
	while ((bp <= (int)startposp) && ((int)startposp < bp +size))\
	{\
	    startposp = ABS(relpointer*, *startposp);\
	}





/*-------------------------------------------------------------------------*/
/* #ifdef SystemV */
union semun {
     	int             val;    /* value for SETVAL */
        struct semid_ds *buf;   /* buffer for IPC_STAT & IPC_SET */
        unsigned short          *array; /* array for GETALL & SETALL */
};
/* #endif */


//******************************************************************************
// declaration of function defined within ACS_TRA_lib.C file
//******************************************************************************

TRALIBSPEC void update_mask(int i, relpointer relp, trace_elementp trcep);
void reset_mask(trace_elementp trcep, int i);
int traverse_set(relpointer relp, trace_elementp trcep);
TRALIBSPEC int get_shared_memory();
TRALIBSPEC int get_semaphore();
TRALIBSPEC int release_semaphore();
TRALIBSPEC void free_temp(relpointer relp);
TRALIBSPEC void free_log_buffers(relpointer startbuf);
TRALIBSPEC void delete_set(relpointer setrel);
relpointer get_one_log_buffer();
TRALIBSPEC relpointer get_log_buffers(logp lp);
TRALIBSPEC void display_log(logp lp, int inew, char delimiter);
TRALIBSPEC void delete_task(char *name, int command, char delimiter);
unsigned int hashvl(char *s, int l);
TRALIBSPEC relpointer get_trace_data_p(char *key, enum trace_data_type typ, int command);
TRALIBSPEC relpointer get_task_data_p();
TRALIBSPEC relpointer search_pid(int pid);
TRALIBSPEC void trace_error(char *errmsg, int errorMsg);
relpointer create_trace_set();
key_t get_trace_key();

#ifdef _WIN32
BOOL WINAPI DllMain(HINSTANCE hDLL,
                    DWORD dwReason, 
					LPVOID lpReson);
#endif
// end of function declarations

 
#endif
