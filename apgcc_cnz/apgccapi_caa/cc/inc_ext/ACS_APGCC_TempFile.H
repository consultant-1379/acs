#ifndef ACS_APGCC_TEMPFILE_H
#define ACS_APGCC_TEMPFILE_H


#ifndef INCLUDED_IOSTREAM
#  include <iostream>
#  define INCLUDED_IOSTREAM
#endif

#ifndef INCLUDED_FSTREAM
#  include <fstream>
#  define INCLUDED_FSTREAM
#endif

#ifndef INCLUDED_STRING
#  include <string>
#  define INCLUDED_STRING
#endif
#  include "ACS_APGCC_OS.H"



class  ACS_APGCC_TempFile
{
public:
	ACS_APGCC_TempFile(bool deleteOnExit=true);
   // Description:
   //    Constructor.
   // Parameters:
   //    deleteOnExit   If true, the temp. file will be deleted
   //                   when this object is destroyed.
   //                   If false, the temp. file will remain
   //                   in the system.
   // Return value:
   //    -
   // Additional information:
   //    Default is to delete the file when this object
   //    is destroyed.

	virtual ~ACS_APGCC_TempFile();
   // Description:
   //    Destructor.
   // Parameters:
   //    -
   // Return value:
   //    -
   // Additional information:
   //    The temp. file is deleted if the flag deleteOnExit
   //    was set to true.

	bool open(const std::string& prefixName, const std::string& format, const std::string& extension="tmp");
   // Description:
   //    Creates a temporary file.
   // Parameters:
   //    prefixName  First part of file name.
   //                Is inserted in front of the format string.
   //                Can be an empty string as in "".
   //
   //    format      Second part of file name.
   //                Is appended to the prefixName.
   //                Can be an empty string as in "".
   //                The format string can contain special
   //                control sequences that is assembled into
   //                a string.
   //                Control characters:
   //                   %i    Unique identifier generated by the system.
   //                         This is a unique sequence of number and characters.
   //                   %u    Name of login user in lower case.
   //                   %D    Date as YYYYMMDD, eg. "19990209".
   //                         Is equal to "%y%m%d".
   //                   %T    Time as HHMMSS, eg. "113201".
   //                         Is equal to "%H%M%S".
   //                   %y    Year as YYYY, eg. "1999".
   //                   %m    Month as MM, eg. "02".
   //                   %d    Day as DD, eg. "09".
   //                   %H    Hour as HH, eg. "11".
   //                   %M    Minute as MM, eg. "32".
   //                   %S    Second as SS, eg. "01".
   //                   %%    Percent sign, eg. "%".
   //                   Other Any other character will remain unchanged.
   //
   //    extension   Extension of the temporary file.
   //                Default is "tmp" as in "myfile.tmp".
   //
   // Return value:
   //    true        Temp. file was created successfully.
   //    false       Temp. file failed to be created.
   // Additional information:
   //    Note that the file is kept OPENED until close(), remove()
   //    or the object is destroyed.
   //    Use the below ostream and istreams to access the file.
   //
   //    Example:
   //    1, open("myfile","%D_%T")
   //       Generated file name = "myfile19990209_113201.tmp".
   //
   //    2, open("","%u","prt"); Login user is "Administrator".
   //       Generated file name = "administrator.prt".
   //
   //    3, open("log","","tempo")
   //       Generated file name = "log.tempo".
   //
   //    4, open("","AD-7_%u_%D_%H%M_%i","prt"); Login user is "uabsjen".
   //       Generated file name = "AD-7_uabsjen_19990209_1132_c67.prt".

   void deleteOnExit(bool TrueFalse);
   // Description:
   //    Changes the flag that decides whether the
   //    temp. file should be deleted when the object
   //    is destroyed.
   // Parameters:
   //    TrueFalse      If true, the temp. file will be deleted
   //                   when this object is destroyed.
   //                   If false, the temp. file will remain
   //                   in the system.
   // Return value:
   //    -
   // Additional information:
   //    Default is to delete the file when this object
   //    is destroyed. Can also be set in the constructor.

	void close();
   // Description:
   //    Close temprary file.
   // Parameters:
   //    -
   // Return value:
   //    -
   // Additional information:
   //    The file is not deleted.

	bool remove();
   // Description:
   //    Delete temprary file.
   // Parameters:
   //    -
   // Return value:
   //    -
   // Additional information:
   //    The file is deleted.

	const char* filename() const;
   // Description:
   //    Returns the generated name of the temprary file.
   // Parameters:
   //    -
   // Return value:
   //    -
   // Additional information:
   //    -

	std::ostream& os();
	std::istream& is();
   // Description:
   //    Returns an ostream or istream to the opened temp. file.
   // Parameters:
   //    -
   // Return value:
   //    -
   // Additional information:
   //    -


protected:
	bool opened_;
	bool removeOnExit_;
	std::string fname_;
	std::fstream file;
};


#endif // ACS_APGCC_TEMPFILE_H
