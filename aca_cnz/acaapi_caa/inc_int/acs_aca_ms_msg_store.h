/*======i============================================================ */
/**
   @file   acs_aca_ms_msg_store.h

   @brief Header file for MSA API.

          This module contains all the declarations useful to
          specify the class ACAMS_MsgStore.

   @version 1.0.0
*/
/*
   HISTORY
   This section contains reference to problem report and related
   software correction performed inside this module


   PR           DATE      INITIALS    DESCRIPTION
   -----------------------------------------------------------
   N/A       29/01/2013     XHARBAV       Initial Release
==================================================================== */

/*=====================================================================
                          DIRECTIVE DECLARATION SECTION
==================================================================== */
#ifndef ACAMS_MsgStore_H
#define ACAMS_MsgStore_H
/*====================================================================
                        INCLUDE DECLARATION SECTION
==================================================================== */
#include <list>
#include <string>
#include <ace/ACE.h>
#include <ace/Event.h>
#include <acs_aca_common.h>

/*=====================================================================
                        CLASS DECLARATION SECTION
==================================================================== */
/*===================================================================*/
/*===================================================================*/
/**
      @brief     ACAMS_MsgStore
*/
/*=================================================================== */
class ACAMS_MsgStore
{

/*=====================================================================
                        PUBLIC DECLARATION SECTION
==================================================================== */
public:

/*=====================================================================
                        CLASS CONSTRUCTORS
==================================================================== */
/*=================================================================== */
/**
	@brief		ACAMS_MsgStore

	@param		msName

	@param		cpSite

	@param		initiator
*/

/*=================================================================== */
	// Constructors and initializer
	ACAMS_MsgStore(const std::string & msName, const std::string & cpSite, int initiator = 0);
/*=================================================================== */

/*=================================================================== */
/**
	@brief		ACAMS_MsgStore

	@param		msName

	@param		cpSystemId

	@param		initiator
*/
/*=================================================================== */
	ACAMS_MsgStore(const std::string & msName, unsigned cpSystemId,	int initiator = 0);
/*=================================================================== */

/*===================================================================
		PRIVATE DECLARATION SECTION
=================================================================== */

private:
/*=================================================================== */
/**
	@brief		fxInitialize

	@param		isMultipleCPSystem

	@param		cpSystemId

	@param		msName

	@param		cpSite

	@param		initiator

	@return		void
*/
/*=================================================================== */
	void fxInitialize(bool isMultipleCPSystem, unsigned cpSystemId,	const char * msName, const char * cpSite, int initiator);
/*=================================================================== */

/*=====================================================================
                        PUBLIC DECLARATION SECTION
==================================================================== */

public:
/*=================================================================== */
/**
	@brief		~ACAMS_MsgStore
*/
/*=================================================================== */
	virtual ~ACAMS_MsgStore();
/*=================================================================== */

public:
/*=================================================================== */
/**
	@brief		getCommitFileName
			This method is used to get the name of the 
			commitfile.(full-path)

	@return		std::string
*/
/*=================================================================== */
	std::string getCommitFileName() const;
/*=================================================================== */
/*=================================================================== */
/**
	@brief		getDataFileDirectoryName
			This method is used to get the name of the data
			file directory.

	@return		std::string
*/
/*=================================================================== */
	std::string getDataFileDirectoryName() const;
/*=================================================================== */

/*=====================================================================
                        PROTECTED DECLARATION SECTION
==================================================================== */
protected:
/*=================================================================== */
/**
	@brief		getMS_Name
			This method is used to get the name of message store
			as abosulte path.

	@return		std::string
*/

/*=================================================================== */
	std::string getMS_Name() const;
/*=================================================================== */
/*=================================================================== */
/**
	@brief		getMSD_Home
			This method is used to the home path for
			message stores.

	@return		std::string
*/
/*=================================================================== */
	std::string getMSD_Home() const;
/*=================================================================== */
/*=================================================================== */
/**
	@brief		findNextFile

	@param		previousFile

	@param		foundDir

	@return		std::string
*/
/*=================================================================== */
	std::string findNextFile(const std::string & previousFile, bool * foundDir);
/*=================================================================== */
/*=================================================================== */
/**
	@brief		getFirstMsgNumber

	@param		fileName

	@return		unsigned long long
*/
/*=================================================================== */
	unsigned long long getFirstMsgNumber(const std::string & fileName) const;
/*=================================================================== */

private:

/*=================================================================== */
/**
	@brief		ACAMS_MsgStore

*/
/*=================================================================== */
	ACAMS_MsgStore();
/*=================================================================== */
/*=================================================================== */
/**
	@brief		ACAMS_MsgStore

	@param		anotherMS

	@return		ACAMS_MsgStore
*/
/*=================================================================== */
	ACAMS_MsgStore(const ACAMS_MsgStore & anotherMS);
/*=================================================================== */
/*=================================================================== */
/**
	@brief		operator=

	@param		anotherMS

	@return		ACAMS_MsgStore
*/
/*=================================================================== */
	const ACAMS_MsgStore & operator=(const ACAMS_MsgStore & anotherMS);
/*=================================================================== */
/*=================================================================== */
/**
	@brief		findDir

	@param		s

	@return		std::list<std::string>
*/
/*=================================================================== */
	std::list<std::string> findDir(std::string s);
/*=================================================================== */

private:
/*=================================================================== */
/**
	@brief		myHomePath
*/
/*=================================================================== */
	std::string myHomePath;
/*=================================================================== */
/*=================================================================== */
/**
	@brief		myName
*/
/*=================================================================== */
	std::string myName;
/*=================================================================== */
};

#endif
