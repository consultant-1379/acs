/*=================================================================== */
/**
   @file   acs_chb_threadpool.h

   @brief Header file for CHB module.

          This module contains all the declarations useful to
          specify the class.

   @version 1.0.0
 */
/*
   HISTORY
   This section contains reference to problem report and related
   software correction performed inside this module


   PR           DATE      INITIALS    DESCRIPTION
   -----------------------------------------------------------
   N/A       21/01/2011   XNADNAR   Initial Release
==================================================================== */

/*=====================================================================
                          DIRECTIVE DECLARATION SECTION
==================================================================== */
#ifndef __THREAD_POOL_H__
#define __THREAD_POOL_H__

/*====================================================================
                        INCLUDE DECLARATION SECTION
==================================================================== */
//#include <windows.h>

#include <map>
#include <deque>
#include <functional>
#include <list>
#include <vector>
#include <utility>
#include "acs_chb_thread_procedure.h"
#include <ace/Recursive_Thread_Mutex.h>
#include <ace/Event_Handler.h>
#include <ace/Synch.h>
#include <ace/Thread_Manager.h>
#include <ace/OS_NS_poll.h>

/*=====================================================================
                        DEFINE DECLARATION SECTION
==================================================================== */
/*=================================================================== */
/**
   @brief  TRUE

 */
/*=================================================================== */
#define TRUE	true
/*=================================================================== */
/**
   @brief  FALSE

 */
/*=================================================================== */
#define FALSE	false
/*=================================================================== */
/**
   @brief  HANDLE

 */
/*=================================================================== */
#define HANDLE ACE_hthread_t
/*=================================================================== */
/**
   @brief  DWORD

 */
/*=================================================================== */
#define DWORD ACE_UINT32

#ifndef STDCALL
/*=================================================================== */
/**
   @brief  STDCALL

 */
/*=================================================================== */
#define STDCALL __attribute__((__stdcall))
/*=================================================================== */
/**
   @brief  MICROSEC

 */
/*=================================================================== */
#define MICROSEC 1000
#endif


/*=====================================================================
                        TYPE DECLARATION SECTION
==================================================================== */
/*=================================================================== */
/**
   @brief boolean_t
 */
/*=================================================================== */
typedef enum { _B_FALSE, _B_TRUE } boolean_t;
/*=====================================================================
                        DEFINE DECLARATION SECTION
==================================================================== */
/*=================================================================== */
/**
   @brief  AND

 */
/*=================================================================== */
#define AND 1
/*=================================================================== */
/**
   @brief  OR

 */
/*=================================================================== */
#define OR  0
/*=================================================================== */
/**
   @brief  NULLP

 */
/*=================================================================== */
#define NULLP ((void *)0)
using namespace std;
/*=====================================================================
                        CLASS DECLARATION SECTION
==================================================================== */
/*===================================================================*/
/**
      @brief     ThreadPool

 */
/*=================================================================== */
class ThreadPool {
	/*=====================================================================
		                        PUBLIC DECLARATION SECTION
	==================================================================== */
public:
	/*=====================================================================
	                        CONSTANT DECLARATION SECTION
	==================================================================== */

	/*=================================================================== */
	/**
	   @brief ERR_CRITICAL_SECTION_INITIALIZE
	 */
	/*=================================================================== */
	static const ACE_INT32 ERR_CRITICAL_SECTION_INITIALIZE = -1;
	/*=================================================================== */
	/**
		   @brief ERR_CRITICAL_SECTION_ENTER
	 */
	/*=================================================================== */
	static const ACE_INT32 ERR_CRITICAL_SECTION_ENTER = -2;
	/*=================================================================== */
	/**
		   @brief ERR_GENERIC_ERROR
	 */
	/*=================================================================== */
	static const ACE_INT32 ERR_GENERIC_ERROR = -3;
	/*=================================================================== */
	/**
		   @brief ERR_WAKEUP_TO_RUN_EVENT_CREATION
	 */
	/*=================================================================== */
	static const ACE_INT32 ERR_WAKEUP_TO_RUN_EVENT_CREATION = -4;
	/*=================================================================== */
	/**
		   @brief ERR_WAKEUP_TO_RUN_EVENT_SET
	 */
	/*=================================================================== */
	static const ACE_INT32 ERR_WAKEUP_TO_RUN_EVENT_SET = -5;
	/*=================================================================== */
	/**
		   @brief ERR_CREATE_POOL_THREAD
	 */
	/*=================================================================== */
	static const ACE_INT32 ERR_CREATE_POOL_THREAD = -6;
	/*=================================================================== */
	/**
		   @brief ERR_ALLOCATING_THREAD_INFO_RECORD
	 */
	/*=================================================================== */
	static const ACE_INT32 ERR_ALLOCATING_THREAD_INFO_RECORD = -7;
	/*=================================================================== */
	/**
		   @brief ERR_RESUMING_NEW_THREAD
	 */
	/*=================================================================== */
	static const ACE_INT32 ERR_RESUMING_NEW_THREAD = -8;
	/*=================================================================== */
	/**
		   @brief ERR_MAP_INSERTION
	 */
	/*=================================================================== */
	static const ACE_INT32 ERR_MAP_INSERTION = -9;
	/*=================================================================== */
	/**
		   @brief ERR_WAKEUP_TO_EXIT_EVENT_CREATION
	 */
	/*=================================================================== */
	static const ACE_INT32 ERR_WAKEUP_TO_EXIT_EVENT_CREATION = -10;
	/*=================================================================== */
	/**
		   @brief ERR_WAIT_FUNCTIONS_FAILED
	 */
	/*=================================================================== */
	static const ACE_INT32 ERR_WAIT_FUNCTIONS_FAILED = -11;
	/*=================================================================== */
	/**
			   @brief ERR_TASK_COND_WAIT_FAILED
	 */
	/*=================================================================== */
	static const ACE_INT32 ERR_ACE_COND_FAILED = -12;
	/*=================================================================== */
	/**
		   @brief WAR_STOP_REQUESTED
	 */
	/*=================================================================== */
	static const ACE_INT32 WAR_STOP_REQUESTED = 1;




public:
	/*=====================================================================
	                        TYPE DECLARATION SECTION
	==================================================================== */
	/*=================================================================== */
	/**
	   @brief procParamPair_t
	 */
	/*=================================================================== */
	typedef std::pair<ThreadProcedure *, void *> procParamPair_t;


public:
	/*=====================================================================
		                        CLASS CONSTRUCTOR
	==================================================================== */
	/*=================================================================== */
	/**

	      @brief           Constructor for ThreadPool class.

	      @param           autoDeleteProcedures
	                       bool

	 */
	/*=================================================================== */

	inline explicit ThreadPool(bool autoDeleteProcedures = true)
	: _minThread(0), _maxThread(1), _keepAlive(5), _autoDelete(autoDeleteProcedures), _procDeque(),
	  _accessControlInitialized(false), _lastErrorNumber(0), _lastErrorDescription(0),
	  _sleepingThreadCount(0),/* _wakeupToRun(0),*/ _runningThreads(),
	  _stoppedThreads(), _recordCounter(0), _stopRequested(false), _waitFunctionsFailed(false)
	{ fxInitialize(); }
	/*=================================================================== */
	/**

		      @brief           Constructor for ThreadPool class.

		      @param           min

		      @param           max

		      @param           keepAlive

		      @param           autoDeleteProcedures


	 */
	/*=================================================================== */
	inline ThreadPool(ACE_UINT32 min, ACE_UINT32 max, ACE_UINT32 keepAlive = 5, bool autoDeleteProcedures = true)
	: _minThread(min), _maxThread(max), _keepAlive(keepAlive), _autoDelete(autoDeleteProcedures),
	  _procDeque(), _accessControlInitialized(false), _lastErrorNumber(0), _lastErrorDescription(0),
	  _sleepingThreadCount(0),/* _wakeupToRun(0),*/ ace_cond(0), _runningThreads(),
	  _stoppedThreads(), _recordCounter(0), _stopRequested(false), _waitFunctionsFailed(false)
	{ fxInitialize(); }

	/*=====================================================================
		                        PRIVATE DECLARATION SECTION
	==================================================================== */
private:
	/*=================================================================== */
	/**

			      @brief           Constructor for ThreadPool class.

			      @param           rhs


	 */
	/*=================================================================== */
	inline ThreadPool(const ThreadPool & rhs)
	{ 

		(void)rhs;
	}
	/*=====================================================================
		                        PRIVATE METHOD
	==================================================================== */
	/*=================================================================== */
	/**
	        @brief     fxInitialize

	        @return    ACE_INT32

	 */
	/*=================================================================== */
	ACE_INT32 fxInitialize();

	/*=====================================================================
		                        PUBLIC DECLARATION SECTION
	==================================================================== */
public:
	/*=====================================================================
	  	                        CLASS DESTRUCTOR
	  ==================================================================== */
	/*=================================================================== */
	/**
	        @brief     Destructor for ThreadPool class.


	 */
	/*=================================================================== */
	inline virtual ~ThreadPool() { _stopRequested = true; fxFinalize(); }
	/*=====================================================================
		                        PRIVATE DECLARATION SECTION
	==================================================================== */
private:
	/*=================================================================== */
	/**
	 @brief     fxFinalize

	 @return    ACE_INT32

	 */
	/*=================================================================== */
	ACE_INT32 fxFinalize();

	/*=====================================================================
		                        PUBLIC DECLARATION SECTION
	==================================================================== */
public:
	/*===================================================================
	                        INLINE ROUTINES  SECTION
	=================================================================== */
	/*=================================================================== */
	/**
	 @brief     minThread

	 @return    ACE_UINT32

	 */
	/*=================================================================== */
	inline ACE_UINT32 minThread() { return _minThread; }
	/*=================================================================== */
	/**
	 @brief     maxThread

	 @return    ACE_UINT32

	 */
	/*=================================================================== */
	inline ACE_UINT32 maxThread() { return _maxThread; }
	/*=================================================================== */
	/**
	 @brief     keepAlive

	 @return    ACE_UINT32

	 */
	/*=================================================================== */
	inline ACE_UINT32 keepAlive() { return _keepAlive; }
	/*=================================================================== */
	/**
	 @brief     autoDelete

	 @return    bool

	 */
	/*=================================================================== */
	inline bool autoDelete() { return _autoDelete; }
	/*=================================================================== */
	/**
	 @brief     lastError

	 @return    ACE_INT32

	 */
	/*=================================================================== */
	inline ACE_INT32 lastError() const { return _lastErrorNumber; }
	/*=================================================================== */
	/**
	 @brief     lastErrorDescription

	 @return    ACE_TCHAR

	 */
	/*=================================================================== */
	inline const ACE_TCHAR * lastErrorDescription() const { return _lastErrorDescription; }
	/*=================================================================== */
	/**
	 @brief     sleepingThreadCount

	 @return    ACE_INT32

	 */
	/*=================================================================== */
	inline ACE_UINT32 sleepingThreadCount() const { return _sleepingThreadCount; }
	/*=================================================================== */
	/**
	 @brief     runningThreadCount

	 @return    ACE_INT32

	 */
	/*=================================================================== */
	inline ACE_UINT32 runningThreadCount() const { return static_cast<ACE_UINT32>(_runningThreads.size()); }


public:
	/*=====================================================================
	 PUBLIC METHODS
	 ==================================================================== */
	/*=================================================================== */
	/**
	 @brief     queueUserWorkItem

	 @param     proc
	 pointer to ThreadProcedure object

	 @param     procParameters

	 @return    ACE_INT32

	 */
	/*=================================================================== */
	ACE_INT32 queueUserWorkItem(ThreadProcedure * proc, void * procParameters = 0);
private:
	/*=====================================================================
	 PRIVATE METHODS
	 ==================================================================== */
	/*=================================================================== */
	/**
	 @brief     fxCreateThread

	 @return    ACE_INT32

	 */
	/*=================================================================== */
	ACE_INT32 fxCreateThread();
	/*=================================================================== */
	/**
	 @brief     fxDeleteThreadsNotRunning

	 @return    ACE_INT32

	 */
	/*=================================================================== */
	ACE_INT32 fxDeleteThreadsNotRunning();
	/*=================================================================== */
	/**
	 @brief     fxWorkerMain

	 @param     myPool

	 @return    ACE_INT32

	 */
	/*=================================================================== */
	static ACE_UINT32 fxWorkerMain(void * myPool);


private:

	/*=====================================================================
		                        OPERATOR FUNCTION
	==================================================================== */
#if 0
	// COMMENTED TO RESOLVE CPPCHECK ERRORS
	/*=================================================================== */
	/**
	 @brief     operator=

	 @param     rhs

	 @return    ThreadPool

	 */
	/*=================================================================== */
	inline ThreadPool & operator=(const ThreadPool & rhs)
	{
		(void)rhs;
		return *this;
	}
#endif
	/*=====================================================================
						 PRIVATE DECLARATION SECTION
	 ==================================================================== */
private:
	/*=====================================================================
						 INTERNAL CLASS DECLARATION SECTION
	 ==================================================================== */
	class ThreadInfoRecord {
		/*=====================================================================
						 PUBLIC DECLARATION SECTION
	 ==================================================================== */
	public:
		/*=====================================================================
						 CONSTANT DECLARATION SECTION
		 ==================================================================== */
		/*=================================================================== */
		/**
			 @brief STARTING
		 */
		/*=================================================================== */
		static const ACE_INT32 STARTING = 0;
		/*=================================================================== */
		/**
			 @brief RUNNING
		 */
		/*=================================================================== */
		static const ACE_INT32 RUNNING = 1;
		/*=================================================================== */
		/**
			 @brief SLEEPING
		 */
		/*=================================================================== */
		static const ACE_INT32 SLEEPING = 2;
		/*=================================================================== */
		/**
			 @brief STOPPING
		 */
		/*=================================================================== */
		static const ACE_INT32 STOPPING = 3;
		/*=================================================================== */
		/**
			 @brief STOPPED
		 */
		/*=================================================================== */
		static const ACE_INT32 STOPPED = 4;
		/*=================================================================== */
		/**
			 @brief TERMINATED
		 */
		/*=================================================================== */
		static const ACE_INT32 TERMINATED = 5;


	public:
		/*===================================================================
		                        INLINE ROUTINES  SECTION
		=================================================================== */
		/*===================================================================
		                        CLASS CONSTRUCTORS
		=================================================================== */
		/*=================================================================== */
		/**
			 @brief     Constructor for ThreadInfoRecord class.

		 */
		/*=================================================================== */
		inline ThreadInfoRecord()
		: id(0), threadHandle(0), threadId(0), threadPool(0), threadState(STARTING),
		  userProc(0), userPar(0) {}
		/*=================================================================== */
		/**
		        @brief     Constructor for ThreadInfoRecord class.

		        @param     recordId

			@param     pool
						   pointer to Threadpool object

			@param     state


		 */
		/*=================================================================== */
		inline explicit ThreadInfoRecord(ACE_UINT32 recordId, ThreadPool * pool = 0, ACE_INT32 state = STARTING)
		: id(recordId), threadHandle(0), threadId(0), threadPool(pool), threadState(state),
		  userProc(0), userPar(0) {}
		/*=================================================================== */
		/**
				@brief     Constructor for ThreadInfoRecord class.

				@param     recordId

				@param     handle

				@param     id

				@param     pool
						   pointer to Threadpool object

				@param     state


		 */
		/*=================================================================== */
		inline ThreadInfoRecord(ACE_UINT32 recordId, HANDLE handle, ACE_UINT32 id, ThreadPool * pool, ACE_INT32 state = STARTING)
		: id(recordId), threadHandle(handle), threadId(id), threadPool(pool), threadState(state),
		  userProc(0), userPar(0) {}


	public:
		/*=====================================================================
				CLASS DESTRUCTOR
	  ==================================================================== */
		/*=================================================================== */
		/**
			@brief     Destructor for ThreadInfoRecord class.

					   The destructor of the class. The object is removed from the
					   list of objects.

		 */
		/*=================================================================== */
		inline ~ThreadInfoRecord()
		{
//			if (threadHandle)
//			{
//				delete (HANDLE *)threadHandle;
//				threadHandle = 0;
//			}

		}


	public:
		/*===================================================================
					PUBLIC ATTRIBUTES
	=================================================================== */
		/*=================================================================== */
		/**
		@brief   id

		 */
		/*=================================================================== */
		ACE_UINT32 id;
		/*=================================================================== */
		/**
		@brief   threadHandle

		 */
		/*=================================================================== */
		HANDLE threadHandle;
		/*=================================================================== */
		/**
		@brief   threadId

		 */
		/*=================================================================== */
		ACE_UINT32 threadId;
		/*=================================================================== */
		/**
		@brief   idthreadPool

		 */
		/*=================================================================== */
		ThreadPool * threadPool;
		/*=================================================================== */
		/**
		@brief   threadState

		 */
		/*=================================================================== */
		ACE_INT32 threadState;
		/*=================================================================== */
		/**
		@brief   userProc

		 */
		/*=================================================================== */
		ThreadProcedure * userProc;
		/*=================================================================== */
		/**
		@brief   userPar

		 */
		/*=================================================================== */
		void * userPar;
	};

	/*===================================================================
PRIVATE ATTRIBUTE
=================================================================== */
private:
	/*=================================================================== */
	/**
@brief   _minThread

	 */
	/*=================================================================== */
	ACE_UINT32 _minThread;
	/*=================================================================== */
	/**
@brief   _maxThread

	 */
	/*=================================================================== */
	ACE_UINT32 _maxThread;
	/*=================================================================== */
	/**
@brief   _keepAlive

	 */
	/*=================================================================== */
	ACE_UINT32 _keepAlive;
	/*=================================================================== */
	/**
@brief   _autoDelete

	 */
	/*=================================================================== */
	bool _autoDelete;

	/*=================================================================== */
	/**
@brief   WAIT_FIRST_OBJECT

	 */
	/*=================================================================== */
	static const ACE_UINT16 WAIT_FIRST_OBJECT = 1;
	/*=================================================================== */
	/**
@brief   WAIT_SECOND_OBJECT

	 */
	/*=================================================================== */
	static const ACE_UINT16 WAIT_SECOND_OBJECT = 2;
	/*=================================================================== */
	/**
			@brief   WAIT_TIMEOUT

	 */
	/*=================================================================== */
	static const ACE_UINT16 WAIT_TIMEOUT = 3;
	/*=================================================================== */
	/**
			@brief   WAIT_FAILED

	 */
	/*=================================================================== */
	static const ACE_UINT16 WAIT_FAILED = 0;
	/*=================================================================== */
	/**
			@brief   _procDeque

	 */
	/*=================================================================== */
	std::deque<procParamPair_t> _procDeque; //FINALIZE
	/*=================================================================== */
	/**
			@brief   _accessControl

	 */
	/*=================================================================== */
	ACE_Recursive_Thread_Mutex *_accessControl;
	/*=================================================================== */
	/**
			@brief   _accessControlInitialized

	 */
	/*=================================================================== */
	bool _accessControlInitialized;
	/*=================================================================== */
	/**
			@brief   _lastErrorNumber

	 */
	/*=================================================================== */
	ACE_INT32 _lastErrorNumber;
	/*=================================================================== */
	/**
			@brief   _lastErrorDescription

	 */
	/*=================================================================== */
	const ACE_TCHAR * _lastErrorDescription;
	/*=================================================================== */
	/**
			@brief   _sleepingThreadCount

	 */
	/*=================================================================== */
	ACE_UINT32 _sleepingThreadCount;
	/*=================================================================== */
	/**
			@brief   _wakeupEvents

	 */
	/*=================================================================== */

	//ACE_Event* _wakeupEvents[2];
	
	//Sumana Changes	
	//int  _wakeupEvents[2];	
	/*=================================================================== */
	/**
			@brief   m_lpEndEvent

	 */
	/*=================================================================== */
	static ACE_Event *m_lpEndEvent;
	/*=================================================================== */
	/**
			@brief   cond_mutex

	 */
	/*=================================================================== */
	ACE_Thread_Mutex cond_mutex;
	/*=================================================================== */
	/**
				@brief   ace_cond

	 */
	/*=================================================================== */
	ACE_Condition<ACE_Thread_Mutex> *ace_cond;
	/*=================================================================== */
	/**
			@brief   _runningThreads

	 */
	/*=================================================================== */
	std::map<ACE_UINT32, ThreadInfoRecord *> _runningThreads; //FINALIZE
	/*=================================================================== */
	/**
			@brief   _stoppedThreads

	 */
	/*=================================================================== */
	std::deque<ThreadInfoRecord *> _stoppedThreads; ////FINALIZE
	/*=================================================================== */
	/**
			@brief   _recordCounter

	 */
	/*=================================================================== */
	ACE_UINT32 _recordCounter;
	/*=================================================================== */
	/**
			@brief   _stopRequested

	 */
	/*=================================================================== */
	bool _stopRequested;
	/*=================================================================== */
	/**
			@brief   _waitFunctionsFailed

	 */
	/*=================================================================== */
	bool _waitFunctionsFailed;
	/*=================================================================== */
	/**
			@brief   threadManager

	 */
	/*=================================================================== */
	ACE_Thread_Manager threadManager;
	/*===================================================================
	                          PRIVATE METHODS
	   =================================================================== */
	/*=================================================================== */
	/**
	          @brief     TerminateThread

	          @param     threadHandle

	          @return    ACE_INT32

	 */
	/*=================================================================== */
	ACE_INT32 TerminateThread(HANDLE threadHandle);
	/*=================================================================== */
	/**
	          @brief     SetEvent

	          @param     m_lpEndEvent

	          @return    ACE_INT32

	 */
	/*=================================================================== */
	ACE_INT32 SetEvent(ACE_Event *m_lpEndEvent);
	/*=================================================================== */
	/**
	          @brief     ResetEvent

	          @param     m_lpEndEvent

	          @return    ACE_INT32

	 */
	/*=================================================================== */
	ACE_INT32 ResetEvent(ACE_Event *m_lpEndEvent);
	/*=================================================================== */
	/**
	          @brief     StartThread

	          @param     func

	          @param     arg

	          @param     t_id

	          @param     *

	          @return    int

	 */
	/*=================================================================== */
	int StartThread(ACE_THR_FUNC func, void *arg, ACE_thread_t *t_id, ACE_hthread_t*);
	/*=================================================================== */
	/**
	          @brief     WaitForMultipleObjects

	          @param     Count

	          @param     Events

	          @param     fWaitall

	          @param     msTimeOut

	          @return    boolean_t

	 */
	/*=================================================================== */
	static boolean_t WaitForMultipleObjects(int Count, void **Events, boolean_t fWaitall, ACE_UINT32& msTimeOut);
	/*=================================================================== */
	/**
	          @brief     ClockGetTime

	          @param     tp

	          @param     msTimeOut

	          @return    boolean_t

	 */
	/*=================================================================== */
	static boolean_t ClockGetTime(struct timespec *tp, long msTimeOut);

	ACE_HANDLE _wakeupEvents[2];

};

#endif
