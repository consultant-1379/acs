/*=================================================================== */
/**
   @file   acs_emf_param.h

   @brief Header file for EMF module.

          This module contains all the declarations useful to
          specify the class.

   @version 1.0.0

   HISTORY
   This section contains reference to problem report and related
   software correction performed inside this module


   PR           DATE      INITIALS    DESCRIPTION
   -----------------------------------------------------------
   N/A       DD/MM/YYYY   XRAMMAT   Initial Release
==================================================================== */
/*=====================================================================
                          DIRECTIVE DECLARATION SECTION
==================================================================== */
#ifndef ACS_EMF_PARAM_H
#define ACS_EMF_PARAM_H
/*====================================================================
                        INCLUDE DECLARATION SECTION
==================================================================== */
//#include <tchar.h>
#include <ace/ACE.h>
#include <vector>

/*=====================================================================
                        DEFINE DECLARATION SECTION
==================================================================== */
#ifndef FALSE
	#define FALSE false
#endif

#ifndef TRUE
#define TRUE true
#endif
/*=====================================================================
                        CLASS DECLARATION SECTION
==================================================================== */
/*===================================================================*/
/**
      @brief  ACS_EMF_Array
 */
/*=================================================================== */
class ACS_EMF_Array
{
	/*=====================================================================
						   PUBLIC DECLARATION SECTION
	==================================================================== */
public:
	/*===================================================================*/
		/**
		      @brief    ACS_EMF_Data - Internal Class

		*/
		/*=================================================================== */
   class ACS_EMF_Data
   {
		/*=====================================================================
							   PUBLIC DECLARATION SECTION
		==================================================================== */
   public:
	   /*=====================================================================
	   								   CLASS CONSTRUCTOR
	   	 ==================================================================== */
	   	/*=================================================================== */
	   	/**
	   			  @brief     ACS_EMF_Data
							   default constructor
	   	 */
	   	/*=================================================================== */
      ACS_EMF_Data();
      /*=================================================================== */
		/**
				  @brief     ACS_EMF_Data
							  parameter constructor
				  @param	 Data
		 */
		/*=================================================================== */
      ACS_EMF_Data(const ACS_EMF_Data& Data);
      /*=================================================================== */
		/**
				  @brief     ACS_EMF_Data destructor

		 */
		/*=================================================================== */
      ~ACS_EMF_Data();
      /*=================================================================== */
		/**
				  @brief     ACS_EMF_Data destructor

		 */
		/*=================================================================== */
  	/*===================================================================
  						   PUBLIC METHOD
  	=================================================================== */
      /*=================================================================== */
		/**
				  @brief      Assigned a DWORD value

		 */
	  /*=================================================================== */
      ACS_EMF_Data& operator =(const ACE_UINT32);
      /*=================================================================== */
		/**
				  @brief      Assigned a ACS_EMF_Data object


		 */
	  /*=================================================================== */
      ACS_EMF_Data& operator =(const ACS_EMF_Data&);
      /*=================================================================== */
      		/**
      				  @brief      Assigned a NULL terminated string value value

      		 */
      	  /*=================================================================== */
      ACS_EMF_Data& operator =(const ACE_TCHAR*);

      /*=================================================================== */
		/**
				  @brief     Copy nSize of characters to a new allocated string buffer

				  @param	 nLen

				  @param	lpszData


		 */
	  /*=================================================================== */
      void Assign(const size_t nLen, const ACE_TCHAR* lpszData);

      /*=================================================================== */
		/**
				  @brief     Returns the size of bytes of a ACS_EMF_Data object

				  @return     size_t

		 */
	  /*=================================================================== */
      size_t Length() const;

      /*=================================================================== */
		/**
				  @brief     Returns a DWORD value

		 */
	  /*=================================================================== */
      operator ACE_UINT32() const;
      /*=================================================================== */
		/**
				  @brief     Returns a null terminated string value

		 */
	  /*=================================================================== */
      operator const ACE_TCHAR*();
		/*=====================================================================
							   PROTECTED DECLARATION SECTION
		==================================================================== */
   protected:
  	/*===================================================================
     		                        PROTECTED ATTRIBUTE
     =================================================================== */
  	/**
     		      @brief	m_szData
  	 */
      ACE_TCHAR   m_szData[64];
      /**
				  @brief	m_lpData
	   */
      ACE_TCHAR* m_lpData;
      /**
 				  @brief	m_nSize
 		 */
      size_t m_nSize;
   };

public:
   /*=====================================================================
								   CLASS CONSTRUCTOR
	 ==================================================================== */
	/*=================================================================== */
	/**
			  @brief     ACS_EMF_Array
						   default constructor
	 */
	/*=================================================================== */
   ACS_EMF_Array();
	/*=================================================================== */
	/**
			  @brief     ACS_EMF_Array
						  destructor
	 */
	/*=================================================================== */
   ~ACS_EMF_Array();
	/*=================================================================== */
	/**
			  @brief     Adds a new ACS_EMF_Data object and stores it at a specific index of the vector

			  @param     idx : ACE_INT32

			  @return   ACS_EMF_Data
	 */
	/*=================================================================== */
   ACS_EMF_Data& operator [](ACE_INT32 idx);

   /*=================================================================== */
   	/**
   			  @brief     Returns the ACS_EMF_Data object stores at a specific index of the vector

   			  @param     idx : ACE_INT32

   			  @return    const ACS_EMF_Data
   	 */
   	/*=================================================================== */
   const ACS_EMF_Data& operator [](ACE_INT32 idx) const;

   /*=================================================================== */
	/**
			  @brief     Returns a ACS_EMF_Array object

			  @param     array

			  @return    ACS_EMF_Array
	 */
	/*=================================================================== */
   ACS_EMF_Array& operator =(const ACS_EMF_Array& array);

   /*=================================================================== */
   	/**
   			  @brief     Allocates a new ACS_EMF_Data object and stores it at a specific index of the vector

   			  @param     nNewSize

   			  @return    ACS_EMF_Array
   	 */
   	/*=================================================================== */
   void Resize(ACE_INT32 nNewSize);
   /*=================================================================== */
   	/**
   			  @brief     Deletes all ACS_EMF_Data objects from the vector and deallocate the memory

   			  @return    ACS_EMF_Array
   	 */
   	/*=================================================================== */
   void Clear();
   /*=================================================================== */
	/**
			  @brief     Returns the number of ACS_EMF_Data objects stored in the vector

			  @return    int
	 */
	/*=================================================================== */
   int Size();
	/*=====================================================================
						   PUBLIC DECLARATION SECTION
	==================================================================== */
private:
   /*=====================================================================
   								   CLASS CONSTRUCTOR
   	 ==================================================================== */
   	/*=================================================================== */
   	/**
   			  @brief     ACS_EMF_Array
   						   default constructor
   	 */
   	/*=================================================================== */
   ACS_EMF_Array(const ACS_EMF_Array& );

private:
	/*===================================================================
  		                        PRIVATE ATTRIBUTE
  	  =================================================================== */
	/**
  		      @brief	m_vData
	 */
   std::vector<ACS_EMF_Data*> m_vData;
};

/*=====================================================================
                        CLASS DECLARATION SECTION
==================================================================== */
/*===================================================================*/
/**
      @brief  ACS_EMF_ParamList
 */
/*=================================================================== */
class ACS_EMF_ParamList
{
	/*=====================================================================
						   PUBLIC DECLARATION SECTION
	==================================================================== */
public:
	/*=====================================================================
								   CLASS CONSTRUCTOR
	 ==================================================================== */
	/*=================================================================== */
	/**
			  @brief     ACS_EMF_ParamList
							default constructor

	 */
	/*=================================================================== */
   ACS_EMF_ParamList();
	/*=====================================================================
								   CLASS DESTRUCTOR
	 ==================================================================== */
	/*=================================================================== */
	/**
			  @brief     ACS_EMF_ParamList destructor

	 */
	/*=================================================================== */
   ~ACS_EMF_ParamList();
	/*=====================================================================
						   PUBLIC METHOD
	==================================================================== */
	/*=================================================================== */
	/**
			  @brief     Deallocate the memory of an encoded buffer
	 */
	/*=================================================================== */
   void Clear();
	/*=================================================================== */
	/**
			  @brief     Returns the number of objects stored in the vector

			  @return    ACE_INT32
	 */
	/*=================================================================== */
   ACE_INT32 NumOfData();
	/*=================================================================== */
	/**
			  @brief     Encode all ACS_EMF_Data objects to a byte buffer

	 */
	/*=================================================================== */
   void Encode();
   /*=================================================================== */
   	/**
   			  @brief     Decode a byte buffer and constructs a vector of ACS_EMF_Data objects

   			  @param     lpBuffer : const ACE_TCHAR*

   	 */
   	/*=================================================================== */
   void Decode(const ACE_TCHAR* lpBuffer);
   /*=================================================================== */
	/**
			  @brief     Copies the encoded byte buffer

			  @param     lpBuffer : const ACE_TCHAR*

	 */
	/*=================================================================== */
   bool getEncodedBuffer(ACE_TCHAR* lpBuffer);
   /*=================================================================== */
	/**
			  @brief     Returns an pointer to the encoded byte buffer

			  @return     const ACE_TCHAR*

	 */
	/*=================================================================== */
   const ACE_TCHAR* getEncodedBuffer() const;
   /*=================================================================== */
  	/**
  			  @brief     Returns the size in bytes of the encoded byte buffer

  			  @return     size_t

  	 */
  	/*=================================================================== */
   size_t getEncodedSize() const;
public:
	/*=====================================================================
						   PUBLIC ATTRIBUTE
	==================================================================== */
	/**
  		      @brief	Data
	 */
   ACS_EMF_Array Data;
	/**
 		      @brief	CmdCode
	 */
   ACE_UINT32         CmdCode;

private:
   /*=====================================================================
   						   PRIVATE ATTRIBUTE
   	==================================================================== */
   /**
    		      @brief	m_dwResult
   	 */
   ACE_UINT32  m_dwResult;
   /**
    		      @brief	m_lpBuffer
   	 */
   ACE_TCHAR* m_lpBuffer;
   /**
    		      @brief	m_nBufferSize
   	 */
   size_t m_nBufferSize;

};

#endif
